{"version":3,"names":[],"mappings":"","sources":["numberpicker.js"],"sourcesContent":["angular\n    .module('angular-loopify-number-picker', [])\n    .run(['$templateCache', function ($templateCache) {\n        'use strict';\n        $templateCache.put('template/loopify/numberpicker.html', '<table class=\"loopify-number-picker\">' +\n            '<tbody>' +\n            '<tr class=\"text-center\">' +\n            '<td><a ng-click=\"incrementValue()\" ng-class=\"{disabled: !canUp}\" class=\"btn btn-link\" ng-disabled=\"!canUp\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>' +\n            '</tr>' +\n            '<tr>' +\n            '<td class=\"form-group\" ng-class=\"{\\'has-max\\': isMaxValue, \\'has-min\\': isMinValue}\">' +\n            '<input style=\"width:68px;\" type=\"text\" ng-model=\"value\" class=\"form-control text-center\" ng-disabled=\"disabled\" ng-readonly=\"enter\" id=\"{{id}}\">' +\n            '</td>' +\n            '<td ng-if=\"label\">' +\n            '<button type=\"button\" class=\"btn btn-gray text-center\" ng-click=\"togglePercentageValue()\" ng-if=\"percent\">{{percentLabel}}</button>' +\n            '<label for=\"{{id}}\" class=\"control-label\" ng-if=\"!percent\">{{label}}</label>' +\n            '</td>' +\n            '</tr>' +\n            '<tr class=\"text-center\">' +\n            '<td><a ng-click=\"decrementValue()\" ng-class=\"{disabled: !canDown}\" class=\"btn btn-link\" ng-disabled=\"!canDown\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>' +\n            '</tr>' +\n            '</tbody>' +\n            '</table>');\n    }])\n    .directive('loopifyNumberPicker', [function () {\n        'use strict';\n\n        var config = {\n                min: 0,\n                max: Infinity,\n                step: 1,\n                enter: false,\n                percent: false,\n                label: undefined,\n                methodRound: false\n            },\n            service = {\n                index: 0,\n                assignExtend: function (dest, src) {\n                    var o = {};\n\n                    for (var key in src) {\n                        if (dest[key]) {\n                            o[key] = dest[key];\n                        }\n                        else {\n                            o[key] = src[key];\n                            dest[key] = src[key];\n                        }\n                    }\n                    return o;\n                },\n                isNumber: function (value) {\n                    var val = Number(value);\n                    return !isNaN(val) && val == value;\n                },\n                toNumber: function (value) {\n                    return Number(value);\n                },\n                checkNumber: function (value) {\n                    var self = this,\n                    //count no numbers\n                        cnn = 0;\n\n                    if (angular.isArray(value)) {\n                        angular.forEach(value, function (v) {\n                            if (!self.isNumber(v)) {\n                                cnn++;\n                            }\n                        });\n                        if (cnn > 0) {\n                            return false;\n                        }\n                        return true;\n                    }\n                    else {\n                        if (!this.isNumber(value)) {\n                            return false;\n                        }\n                        return true;\n                    }\n                },\n                transform: function (opts) {\n                    for (var key in opts) {\n                        opts[key] = this.toNumber(opts[key]);\n                    }\n                },\n                getId: function () {\n                    return 'number-picker-' + (++this.index);\n                }\n            },\n            base = {\n                restrict: 'E',\n                scope: {\n                    'value': '=',\n                    'min': '@',\n                    'max': '@',\n                    'step': '@',\n                    'enter': '@',\n                    'percent': '@',\n                    'label': '@',\n                    'methodRound': '@'\n                }\n            };\n        return angular.extend(base, {\n            //check if number\n            link: function (scope, element) {\n                var opts = service.assignExtend(scope, config);\n                if (!service.checkNumber([opts.min, opts.max, opts.step])) {\n                    throw new Error('some value: (min, max or step) is not a valid number');\n                }\n\n                if (scope.percent) {\n                    scope.percentLabel = '%';\n                }\n\n                if (scope.percent) {\n                    scope.isPercent = true;\n                }\n\n                scope.id = service.getId();\n\n                //transform string to number\n                service.transform(opts);\n\n                //check if current value on start is not bigger than min value\n                if (opts.min > scope.value) {\n                    scope.value = opts.min;\n                }\n\n                scope.incrementValue = function () {\n                    if (scope.value >= (scope.isPercent ? 100 : opts.max)) {\n                        return;\n                    }\n                    scope.value += opts.step;\n                };\n                scope.decrementValue = function () {\n                    if (scope.value <= (scope.isPercent ? 0 : opts.min)) {\n                        return;\n                    }\n                    scope.value -= opts.step;\n                };\n                scope.togglePercentageValue = function () {\n                    scope.isPercent = !scope.isPercent;\n                    if (scope.isPercent) {\n                        scope.percentLabel = '%';\n                    }\n                    else {\n                        scope.percentLabel = scope.label;\n                    }\n                };\n\n                //watch for disabled buttons\n                scope.$watch('value', function (newValue, oldValue) {\n                    var min = scope.isPercent ? 0 : opts.min,\n                        max = scope.isPercent ? 100 : opts.max;\n\n                    scope.canDown = newValue > min;\n                    scope.canUp = newValue < max;\n                    scope.isMaxValue = !scope.canUp;\n                    scope.isMinValue = !scope.canDown;\n\n                    if (!service.checkNumber(newValue) || newValue > max || newValue < min) {\n                        //set oldValue or min value if oldValue isn't number when newValue isn't a number or newValue more than max or newValue less than min\n                        scope.value = service.checkNumber(oldValue) ? oldValue : opts.min;\n                    }\n                });\n\n                scope.$watch('percentLabel', function () {\n                    if (scope.isPercent) {\n                        scope.value = scope.methodRound ? Math[scope.methodRound](scope.value / scope.max * 100) : scope.value / scope.max * 100;\n                    }\n                    else {\n                        scope.value = scope.methodRound ? Math[scope.methodRound](scope.max * scope.value / 100) : scope.max * scope.value / 100;\n                    }\n                });\n            },\n            templateUrl: 'template/loopify/numberpicker.html'\n        });\n    }]);"],"file":"numberpicker.js","sourceRoot":"/source/"}